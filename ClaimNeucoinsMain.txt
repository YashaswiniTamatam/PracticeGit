import {
  Box,
  FormControl,
  Grid,
  InputAdornment,
  RadioGroup,
  Stack,
  Typography,
  Zoom,
} from "@mui/material"
import {
  WrapperBox,
  StyledButton,
  InputText,
  BorderBox,
  FormControlText,
  CustomRadio,
  TitleContainer,
  DocumentContainer,
} from "./styles"
import {
  AccountCalenderIcon,
  ButtonTickIcon,
  ClockIcon,
  CloseIcon,
  CommonSearchIcon,
  DocumentIcon,
  SearchIcon,
} from "../../../../utils/customIcons"
import { useContext, useEffect, useMemo, useState } from "react"
import RenderActionItem from "../../../../components/hoc/actions/action-items-ui"
import { useMobileCheck } from "../../../../utils/isMobilView"
import DesktopPxToVw, { MobilePxToVw } from "../../../../utils/DesktopFontCalc"
import { theme } from "../../../../lib/theme"
import {
  OptionTypography,
  StyledAutocomplete,
  StyledPaper,
} from "../../../../components/card/styles/book-a-stay-default-card.styles"
import { handleHotelSearch } from "../../../../components/forms/book-a-stay-form/utils"
import { HotelInformation } from "../../../../components/forms/book-a-stay-form/types"
import { ExpandMoreIcon } from "../../../../components/header/styles/booking-menu"
import { AutoCompleteInput } from "../../../../components/forms/gift-card-form/styles"
import { StyledDivider } from "../../../../components/banner/styles"
import CustomDatePickerComponent from "../../../../components/hoc/CustomDatePicker/custom-date-picker.component"
import { formatDateWithMON } from "../../../../utils/getDate"
import { GLOBAL_STORES } from "../../../../utils/Constants"
import SearchStore from "../../../search/store/search.store"
import { IHCLContext } from "../../../../PresentationalComponents/lib/prepare-ihcl-context"
import { useDebounce } from "../../../../utils/useDebounce"
import { RestrictSpecialChar } from "../../../../utils/restrictSpecialChar"
import TextfieldValidator from "../../../../utils/validations/TextfieldValidator"
import {
  amount,
  orderRefNumber,
  senderEmail,
  senderFirstName,
  senderMobile,
} from "../../../../components/forms/gift-card-form/constants"
import { PageContext } from "../../../../PresentationalComponents/lib/prepare-page-context"
import SuccessScreen from "./success-screen"
import BrowseFile from "./browse-file"
import { validateErrorsAndSubmit } from "./validate-and-submit"
import CountryCodeDropdown from "../../../../utils/CountryCodeDropdown"

const ClaimMissingPoints = (props: any) => {
  const context = useContext(IHCLContext)
  //* search store values
  const searchStore = context?.getGlobalStore(
    GLOBAL_STORES.searchStore
  ) as SearchStore
  const { searchResults } = searchStore

  const [forStay, setForStay] = useState<string>("forStay")
  let initialFormValues = {
    reservationName: "",
    [senderEmail]: global?.window?.localStorage?.getItem("userEmail") || "",
    havePhysicalCopy: true,
    [senderFirstName]: "",
    [senderMobile]:
      global?.window?.localStorage?.getItem("userPhoneNumber") || "",
    [orderRefNumber]: "",
    [amount]: "",
    venueName: "",
    approximateTime: "",
  }
  const [formValues, setFormValues] = useState<any>(initialFormValues)
  const [document, setDocument] = useState<any>(null)
  const [error, setError] = useState<any>()
  const [searchResultsResponseData, setResultsResponseData] = useState<any>([])
  const [stayHotelName, setStayHotelName] = useState<HotelInformation | null>(
    null
  )
  const [otherHotelName, setOtherHotelName] = useState<HotelInformation | null>(
    null
  )
  const [formErrors, setFormErrors] = useState<any>()
  const [ErrorMessage, setErrorMessage] = useState<any>()
  const [receiverCountryCode, setReceiverCountryCode] = useState<string>("+91")
  const [stayDate, setStayDate] = useState<any>([])
  const [reservationDate, setReservationStayDate] = useState<any>([])
  const [openCalender, setOpenCalender] = useState({
    checkInCheckOut: false,
    reservation: false,
  })
  const [requestSuccess, setRequestSuccess] = useState(false)
  const [isValidTime, setIsValidTime] = useState(false)
  const debouncedStaySearchTerm = useDebounce(stayHotelName, 300)
  const debouncedOtherSearchTerm = useDebounce(otherHotelName, 300)
  const isMobile = useMobileCheck()

  const handleSearchClose = () => {
    setError((prev: any) => ({
      ...prev,
      search: true,
    }))
    setStayHotelName((prev: any) => null)
  }
  const handleDateSelection = (date: any) => {
    setStayDate(date)
  }

  useEffect(() => {
    if (searchResults?.hotels) {
      setResultsResponseData([
        {
          hotelsData: searchResults?.hotels?.data?.slice(0, 6),
        },
      ])
    }
  }, [searchResults])

  useMemo(() => {
    if (debouncedStaySearchTerm) {
      searchStore?.autoCompleteSearch(stayHotelName?.name ?? "")
    } else if (debouncedOtherSearchTerm) {
      searchStore?.autoCompleteSearch(otherHotelName?.name ?? "")
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debouncedStaySearchTerm, searchStore, debouncedOtherSearchTerm])

  const formValidation = (isFormValid: any, field: any) => {
    setFormErrors({ ...formErrors, [field]: !isFormValid })
  }

  const handleChangeForm = (event: any) => {
    const { name, value } = event.target
    const { status, errorMsg, fieldName } = TextfieldValidator(
      name,
      value,
      "fromClaimCoins"
    )
    setErrorMessage((prev: any) => {
      return {
        ...prev,
        [fieldName]: errorMsg,
      }
    })
    setFormValues((prev: any) => {
      return {
        ...prev,
        [name]: event?.target?.value,
      }
    })
    formValidation(status, name)
  }
  const pageContextUse = useContext(PageContext)

  useEffect(() => {
    if (!JSON.parse(formValues?.havePhysicalCopy)) {
      setDocument(null)
    }
  }, [formValues?.havePhysicalCopy])
  const handleFileUpload = (e: any) => {
    const fileExtensions = ["jpg", "pdf", "jpeg"]

    const file = e.target.files[0]

    if (file) {
      const fileName = file.name
      const fileExtension = fileName.split(".").pop().toLowerCase()

      if (!fileExtensions.includes(fileExtension)) {
        alert("Only JPG and PDF files are allowed.")
      } else if (file.size > 5 * 1024 * 1024) {
        alert("File size exceeds the maximum limit of 5MB.")
      } else {
        setDocument(file)
      }
      setFormErrors({
        ...formErrors,
        document: false,
      })
    }
  }
  return (
    <Box
      sx={{ paddingBottom: isMobile ? MobilePxToVw(110) : DesktopPxToVw(110) }}>
      {!requestSuccess ? (
        <form>
          <BorderBox>
            <TitleContainer>
              <Typography
                variant={isMobile ? "m-body-l" : "body-l"}
                sx={{
                  fontWeight: 700,
                  whiteSpace: "nowrap",
                  paddingBottom: isMobile ? "5.469vw" : "unset",
                }}>
                YOUR INFORMATION FOR
              </Typography>
              <WrapperBox $gap="1.563vw">
                <WrapperBox $gap="0.521vw">
                  <StyledButton
                    $active={forStay === "forStay"}
                    onClick={() => {
                      setForStay("forStay")
                      setOpenCalender({
                        checkInCheckOut: false,
                        reservation: false,
                      })
                    }}
                    startIcon={forStay === "forStay" && <ButtonTickIcon />}>
                    STAY
                  </StyledButton>
                  <StyledButton
                    $active={!(forStay === "forStay")}
                    onClick={() => {
                      setForStay("others")
                    }}
                    startIcon={forStay !== "forStay" && <ButtonTickIcon />}>
                    OTHERS
                  </StyledButton>
                </WrapperBox>
              </WrapperBox>
            </TitleContainer>

            <Grid
              container
              columnSpacing={4}
              sx={{
                paddingTop: isMobile ? MobilePxToVw(55) : DesktopPxToVw(40),
              }}>
              <Grid item md={5.85} sm={12} xs={12}>
                <InputText
                  variant="standard"
                  sx={{ width: "100%" }}
                  placeholder="Name on Reservation*"
                  onChange={(e: any) => handleChangeForm(e)}
                  name={senderFirstName}
                  error={formErrors?.senderFirstName}
                  helperText={
                    formErrors?.senderFirstName &&
                    formValues.senderFirstName.length >= 0 &&
                    ErrorMessage?.senderFirstName
                  }
                />
              </Grid>
              <Grid
                item
                md={5.85}
                sm={12}
                xs={12}
                sx={{ paddingTop: isMobile ? MobilePxToVw(35) : "unset", display: 'flex', alignItems: 'end' }}>
                <CountryCodeDropdown
                  titleStyles={{ bottom: '0.2vw' }}
                  dropdownStyle={{
                    marginLeft: isMobile
                      ? MobilePxToVw(60)
                      : DesktopPxToVw(170),
                    width: isMobile
                      ? MobilePxToVw(500)
                      : DesktopPxToVw(450),
                  }}
                  sx={{ bottom: "" }}
                  countryCode={receiverCountryCode}
                  setCountryCode={setReceiverCountryCode}
                />
                <InputText
                  onInput={(e: any) => {
                    e.target.value = Math.max(0, parseInt(e.target.value))
                      .toString()
                      .slice(0, 10)
                  }}
                  type="number"
                  onKeyDown={RestrictSpecialChar}
                  variant="standard"
                  sx={{ width: "100%", paddingLeft: "2px" }}
                  placeholder="Phone"
                  value={formValues?.senderMobile}
                  name={senderMobile}
                  onChange={(e: any) => handleChangeForm(e)}
                  error={formErrors?.senderMobile}
                  helperText={
                    formErrors?.senderMobile && ErrorMessage?.senderMobile
                  }
                />
              </Grid>
            </Grid>
            <Grid
              container
              columnSpacing={4}
              sx={{
                paddingTop: isMobile ? MobilePxToVw(35) : DesktopPxToVw(40),
              }}>
              <Grid item md={5.85} sm={12} xs={12}>
                <InputText
                  variant="standard"
                  sx={{ width: "100%", padding: "0vw" }}
                  placeholder="Email"
                  error={formErrors?.senderEmail}
                  value={formValues?.senderEmail}
                  name={senderEmail}
                  helperText={
                    formErrors?.senderEmail && ErrorMessage?.senderEmail
                  }
                  onChange={(e: any) => handleChangeForm(e)}
                />
              </Grid>

              <Grid
                item
                md={5.85}
                sm={12}
                xs={12}
                container
                sx={{ paddingTop: isMobile ? MobilePxToVw(35) : "unset" }}>
                <Grid item md={12} xs={12}>
                  <InputText
                    variant="standard"
                    sx={{ width: "100%" }}
                    placeholder={forStay === 'forStay' ? "Confirmation / Invoice Number*" : "Confirmation / Invoice Number"}
                    onChange={(e: any) => handleChangeForm(e)}
                    name={orderRefNumber}
                    error={formErrors?.[orderRefNumber]}
                    value={formValues?.[orderRefNumber]}
                    helperText={
                      formErrors?.[orderRefNumber] &&
                      ErrorMessage?.[orderRefNumber]
                    }
                  />
                </Grid>
              </Grid>
            </Grid>
            {forStay === "forStay" ? (
              <Grid
                container
                columnSpacing={4}
                sx={{
                  paddingTop: isMobile ? MobilePxToVw(35) : "unset",
                  display: "flex",
                }}>
                <Grid
                  item
                  md={5.85}
                  sm={12}
                  xs={12}
                  sx={{
                    paddingTop: isMobile ? MobilePxToVw(35) : DesktopPxToVw(55),
                  }}>
                  {/* using react-date-picker */}
                  <Box
                    position={"relative"}
                    width={"100%"}
                    sx={{
                      borderBottom:
                        formErrors?.stayDate && stayDate?.length === 0
                          ? `0.026vw solid ${theme?.palette?.neuPalette?.hexTwentySeven}` //red
                          : `0.026vw solid ${theme?.palette?.neuPalette?.hexTwenty}`, //ash
                    }}>
                    <CustomDatePickerComponent
                      date={stayDate}
                      isOpen={openCalender.checkInCheckOut}
                      sx={{ cursor: "pointer" }}
                      onChange={handleDateSelection}
                      maxDate={new Date()}
                      calendarWidth={
                        isMobile ? MobilePxToVw(410) : DesktopPxToVw(1120)
                      }
                      calendarIcon={null}
                      showDoubleView={!isMobile}
                      selectRange={true}
                      renderComponent={
                        <Stack
                          alignItems={"center"}
                          flexDirection={"row"}
                          paddingBottom={"1vw"}
                          onClick={() =>
                            setOpenCalender({
                              ...openCalender,
                              checkInCheckOut: !openCalender.checkInCheckOut,
                            })
                          }
                          columnGap={DesktopPxToVw(10)}>
                          <AccountCalenderIcon
                            sx={{ height: isMobile ? "4.302vw" : "1.302vw" }}
                          />

                          <Typography
                            whiteSpace={"nowrap"}
                            variant={isMobile ? "m-body-sl" : "body-ml"}
                            sx={{
                              marginLeft: isMobile ? "3.094vw" : "1.094vw",
                              marginRight: isMobile ? "3.094vw" : "1.094vw",
                            }}>
                            {stayDate?.[0]
                              ? formatDateWithMON(stayDate?.[0])
                              : "Check in*"}
                          </Typography>
                          <StyledDivider
                            sx={{
                              width: isMobile
                                ? `${MobilePxToVw(50)} !important`
                                : `${DesktopPxToVw(50)} !important`,
                            }}
                          />
                          <Typography
                            whiteSpace={"nowrap"}
                            variant={isMobile ? "m-body-sl" : "body-ml"}
                            sx={{
                              marginLeft: isMobile ? "3.094vw" : "1.094vw",
                              marginRight: isMobile ? "3.094vw" : "1.094vw",
                            }}>
                            {stayDate?.[1]
                              ? formatDateWithMON(stayDate?.[1])
                              : "Check out*"}
                          </Typography>
                        </Stack>
                      }></CustomDatePickerComponent>
                  </Box>
                  <Typography
                    sx={{
                      color: theme?.palette?.neuPalette?.hexTwentySeven,
                      fontSize: isMobile ? "2.5vw" : "1vw",
                    }}>
                    {formErrors?.stayDate &&
                      stayDate?.length === 0 &&
                      ErrorMessage?.stayDate}
                  </Typography>
                </Grid>
                <Grid item md={5.85} sm={12} xs={12}>
                  <StyledAutocomplete
                    noOptionsText={"search hotel name"}
                    onChange={(event: any, newValue: any) => {
                      handleHotelSearch(
                        event,
                        setStayHotelName,
                        setError,
                        newValue
                      )
                    }}
                    onInput={(event: any) => {
                      handleHotelSearch(event, setStayHotelName, setError)
                    }}
                    getOptionLabel={(option: any) => option.name}
                    popupIcon={<ExpandMoreIcon />}
                    value={stayHotelName}
                    options={
                      stayHotelName?.name
                        ? searchResultsResponseData?.[0]?.hotelsData || []
                        : []
                    }
                    PaperComponent={({ children }: any) => (
                      <StyledPaper>{children}</StyledPaper>
                    )}
                    renderOption={(props: any) => {
                      return (
                        <OptionTypography
                          variant={isMobile ? "m-body-m" : "body-m"}
                          {...props}>
                          {props.key}
                        </OptionTypography>
                      )
                    }}
                    renderInput={(params: any) => {
                      const { InputProps } = params

                      const temp = {
                        ...params,
                        InputProps: {
                          ...InputProps,
                          startAdornment: (
                            <InputAdornment position="start">
                              <SearchIcon
                                sx={{
                                  height: "auto",
                                  marginBottom: "0.22vw",
                                  width: isMobile
                                    ? MobilePxToVw(22)
                                    : DesktopPxToVw(22),
                                  marginRight: isMobile ? "3.125vw" : "1.125vw",
                                }}
                              />
                            </InputAdornment>
                          ),
                          endAdornment: stayHotelName?.name &&
                            stayHotelName?.name?.length > 0 && (
                              <InputAdornment position="end">
                                <Box
                                  component={"div"}
                                  onClick={handleSearchClose}>
                                  <CloseIcon
                                    sx={{
                                      cursor: "pointer",
                                      height: isMobile ? "auto" : "0.8vw",
                                      width: isMobile ? "2.5vw" : "1vw",
                                    }}
                                  />
                                </Box>
                              </InputAdornment>
                            ),
                        },
                      }
                      return (
                        <AutoCompleteInput
                          sx={{
                            paddingTop: isMobile
                              ? MobilePxToVw(35)
                              : DesktopPxToVw(40),
                          }}
                          variant="standard"
                          error={
                            formErrors?.hotelName && stayHotelName === null
                          }
                          helperText={
                            formErrors?.hotelName &&
                            stayHotelName === null &&
                            ErrorMessage?.hotelName
                          }
                          name={"name"}
                          placeholder="Hotel Name*"
                          {...temp}
                        />
                      )
                    }}
                  />
                </Grid>
              </Grid>
            ) : (
              <>
                <Grid
                  container
                  columnSpacing={4}
                  sx={{
                    paddingTop: isMobile ? MobilePxToVw(25) : DesktopPxToVw(40),
                    display: "flex",
                  }}>
                  <Grid item md={5.85} sm={12} xs={12}>
                    <StyledAutocomplete
                      onChange={(event: any, newValue: any) => {
                        handleHotelSearch(
                          event,
                          setOtherHotelName,
                          setError,
                          newValue
                        )
                      }}
                      onInput={(event: any) => {
                        handleHotelSearch(event, setOtherHotelName, setError)
                      }}
                      getOptionLabel={(option: any) => option.name}
                      popupIcon={<ExpandMoreIcon />}
                      value={otherHotelName}
                      options={
                        otherHotelName?.name
                          ? searchResultsResponseData?.[0]?.hotelsData || []
                          : []
                      }
                      PaperComponent={({ children }: any) => (
                        <StyledPaper>{children}</StyledPaper>
                      )}
                      renderOption={(props: any) => {
                        return (
                          <OptionTypography
                            variant={isMobile ? "m-body-m" : "body-m"}
                            {...props}>
                            {props.key}
                          </OptionTypography>
                        )
                      }}
                      renderInput={(params: any) => {
                        const { InputProps } = params

                        const temp = {
                          ...params,
                          InputProps: {
                            ...InputProps,
                            startAdornment: (
                              <InputAdornment
                                position="start"
                                sx={{ marginRight: "0vw" }}>
                                <CommonSearchIcon
                                  sx={{
                                    paddingRight: isMobile
                                      ? "3.125vw"
                                      : "1.042vw",

                                    alignItems: "center",
                                    width: isMobile ? "6.86vw" : "2.287vw",
                                    height: isMobile ? "3.86vw" : "1.287vw",
                                  }}
                                />
                              </InputAdornment>
                            ),
                            endAdornment: otherHotelName?.name &&
                              otherHotelName?.name?.length > 0 && (
                                <InputAdornment position="end">
                                  <Box
                                    component={"div"}
                                    onClick={() => {
                                      setOtherHotelName((prev: any) => null)
                                      setFormErrors({
                                        ...formErrors,
                                        otherHotelName: false,
                                      })
                                    }}>
                                    <CloseIcon
                                      sx={{
                                        cursor: "pointer",
                                        height: isMobile ? "auto" : "0.8vw",
                                        width: isMobile ? "2.5vw" : "1vw",
                                      }}
                                    />
                                  </Box>
                                </InputAdornment>
                              ),
                          },
                        }
                        return (
                          <AutoCompleteInput
                            variant="standard"
                            name={"name"}
                            error={
                              otherHotelName === null &&
                              formErrors?.otherHotelName
                            }
                            helperText={
                              formErrors?.otherHotelName &&
                              otherHotelName === null &&
                              ErrorMessage?.otherHotelName
                            }
                            placeholder="Hotel Name*"
                            {...temp}
                          />
                        )
                      }}
                    />
                  </Grid>
                  <Grid item md={5.85} sm={12} xs={12}>
                    <InputText
                      variant="standard"
                      name="venueName"
                      onChange={(e: any) => handleChangeForm(e)}
                      sx={{ width: "100%" }}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment
                            position="start"
                            sx={{ marginRight: "0vw" }}>
                            <CommonSearchIcon
                              sx={{
                                paddingRight: isMobile ? "3.125vw" : "1.042vw",
                                width: isMobile ? "6.86vw" : "2.287vw",
                                height: isMobile ? "3.86vw" : "1.287vw",
                                alignItems: "center",
                              }}
                            />
                          </InputAdornment>
                        ),
                      }}
                      value={formValues?.venueName}
                      placeholder="Restaurant / Venue Name"
                    />
                  </Grid>
                </Grid>
                <Grid
                  container
                  columnSpacing={4}
                  sx={{
                    paddingTop: isMobile ? MobilePxToVw(25) : DesktopPxToVw(40),
                    display: "flex",
                    // alignItems: "flex-end",
                  }}>
                  <Grid
                    item
                    md={5.85}
                    sm={12}
                    xs={12}
                    sx={{
                      paddingTop: isMobile
                        ? MobilePxToVw(25)
                        : DesktopPxToVw(17),
                    }}>
                    <Box
                      position={"relative"}
                      width={"100%"}
                      sx={{
                        borderBottom: `0.026vw solid ${theme?.palette?.neuPalette?.hexTwenty}`,
                      }}>
                      <CustomDatePickerComponent
                        maxDate={new Date()}
                        date={reservationDate}
                        isOpen={openCalender.reservation}
                        sx={{
                          width: "100%",
                          cursor: "pointer",
                          paddingTop: isMobile ? MobilePxToVw(35) : "unset",
                        }}
                        onChange={(date: any) => {
                          setReservationStayDate(date)
                        }}
                        defaultActiveStartDate={new Date()}
                        calendarWidth={
                          isMobile ? MobilePxToVw(410) : DesktopPxToVw(450)
                        }
                        calendarIcon={null}
                        renderComponent={
                          <Stack
                            alignItems={"center"}
                            flexDirection={"row"}
                            paddingBottom={isMobile ? "0vw" : "0.567vw"}
                            onClick={() =>
                              setOpenCalender({
                                ...openCalender,
                                reservation: !openCalender.reservation,
                              })
                            }
                            columnGap={DesktopPxToVw(10)}>
                            <AccountCalenderIcon
                              sx={{
                                width: isMobile ? "5.302vw" : "1.302vw",
                                height: isMobile ? "4.302vw" : "1.302vw",
                              }}
                            />
                            <Typography
                              whiteSpace={"nowrap"}
                              paddingLeft={isMobile ? "4.042vw" : "0.7vw"}
                              variant={isMobile ? "m-body-sl" : "body-ml"}>
                              {reservationDate?.length !== 0
                                ? formatDateWithMON(reservationDate)
                                : "Date of reservation"}
                            </Typography>
                          </Stack>
                        }
                      />
                    </Box>
                    <Typography
                      sx={{
                        color: theme?.palette?.neuPalette?.hexTwentySeven,
                        fontSize: isMobile ? "2.5vw" : "1vw",
                      }}>
                      {formErrors?.reservationDate &&
                        ErrorMessage?.reservationDate}
                    </Typography>
                  </Grid>
                  <Grid item md={5.85} sm={12} xs={12}>
                    <InputText
                      variant="standard"
                      value={formValues?.approximateTime}

                      sx={{
                        width: "100%",
                        paddingTop: isMobile ? MobilePxToVw(35) : "unset",
                      }}
                      onChange={(e: any) => {
                        const inputTime = e.target.value
                        const timeRegex = /^([0-1][0-9]|2[0-3]):[0-5][0-9]$/
                        setFormValues({
                          ...formValues,
                          approximateTime: inputTime,
                        })
                        if (timeRegex.test(inputTime)) {
                          setIsValidTime(true)
                        } else {
                          setIsValidTime(false)
                        }
                      }}
                      error={
                        !isValidTime && formValues?.approximateTime?.length > 0
                      }
                      helperText={
                        formValues?.approximateTime?.length > 0 &&
                        !isValidTime &&
                        "Invalid time format. Please use (HH:MM)"
                      }
                      InputProps={{
                        startAdornment: (
                          <InputAdornment
                            position="start"
                            sx={{ marginRight: "0vw" }}>
                            <ClockIcon
                              sx={{
                                width: isMobile ? "5.302vw" : "1.302vw",
                                height: isMobile ? "4.302vw" : "1.302vw",
                                marginRight: isMobile ? "3.281vw" : "1.094vw",
                              }}
                            />
                          </InputAdornment>
                        ),
                      }}
                      placeholder="Approximate time"
                    />
                  </Grid>
                </Grid>
              </>
            )}
            <Box
              sx={{
                paddingTop: isMobile ? MobilePxToVw(55) : DesktopPxToVw(40),
              }}>
              <Typography variant={isMobile ? "m-body-l" : "body-l"}>
                Do you have a copy of your hotel bill?
              </Typography>
              <FormControl sx={{ width: "100%" }}>
                <RadioGroup
                  sx={{ display: "flex", rowGap: "1.042vw" }}
                  aria-labelledby="radio-buttons"
                  defaultValue="Yes"
                  name="radio-buttons-group"
                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                    setFormValues({
                      ...formValues,
                      havePhysicalCopy: (event.target as HTMLInputElement)
                        .value,
                    })
                  }}>
                  <FormControlText
                    sx={{
                      letterSpacing: "-0.026vw",
                      lineHeight: "3.5vw",
                      paddingTop: isMobile ? "4.063vw" : "1.042vw",
                    }}
                    value={true}
                    control={<CustomRadio />}
                    label="Yes, I have a digital or a paper copy"
                    checked={JSON.parse(formValues?.havePhysicalCopy)}
                  />
                  {JSON.parse(formValues?.havePhysicalCopy) && (
                    <Zoom in={JSON.parse(formValues?.havePhysicalCopy)}>
                      <Box>
                        <BrowseFile handleFileUpload={handleFileUpload} />
                        {document?.name && (
                          <DocumentContainer>
                            <Box
                              sx={{
                                columnGap: "1.042vw",
                                display: "flex",
                                alignItems: "center",
                              }}>
                              <DocumentIcon />
                              {document?.name}
                            </Box>
                            <CloseIcon
                              onClick={() => setDocument(null)}
                              sx={{ cursor: "pointer" }}
                            />
                          </DocumentContainer>
                        )}
                        <Typography
                          sx={{
                            color: theme?.palette?.neuPalette?.hexTwentySeven,
                            fontSize: isMobile ? "2.5vw" : "1vw",
                          }}>
                          {formErrors?.document && ErrorMessage?.document}
                        </Typography>
                      </Box>
                    </Zoom>
                  )}

                  <FormControlText
                    sx={{ paddingTop: isMobile ? MobilePxToVw(26) : "unset" }}
                    value={false}
                    control={<CustomRadio />}
                    label="No, I do not have my bill"
                    checked={!JSON.parse(formValues?.havePhysicalCopy)}
                  />
                  {!JSON.parse(formValues?.havePhysicalCopy) && (
                    <Grid container>
                      <Grid item md={5.85} sm={12} xs={12}>
                        <InputText
                          variant="standard"
                          sx={{ width: "100%" }}
                          placeholder="Enter Amount Spent*"
                          type="number"
                          onKeyDown={RestrictSpecialChar}
                          value={formValues?.amount}
                          name={amount}
                          error={formErrors?.amount}
                          helperText={
                            formErrors?.amount &&
                            formValues.amount.length >= 0 &&
                            ErrorMessage?.amount
                          }
                          onChange={(e: any) => handleChangeForm(e)}
                        />
                      </Grid>
                    </Grid>
                  )}
                </RadioGroup>
              </FormControl>
            </Box>
          </BorderBox>
          <Stack
            gap={2}
            direction={"row"}
            pt={4}
            justifyContent={isMobile ? "center" : "left"}>
            <RenderActionItem
              isActionButtonType={true}
              url=""
              title={"SUBMIT"}
              variant="light-contained"
              navigationType="internal"
              onClick={() => {
                validateErrorsAndSubmit(
                  forStay,
                  formValues,
                  stayDate,
                  setStayDate,
                  setFormErrors,
                  setErrorMessage,
                  formErrors,
                  stayHotelName,
                  pageContextUse,
                  setRequestSuccess,
                  setOpenCalender,
                  setFormValues,
                  initialFormValues,
                  setStayHotelName,
                  setOtherHotelName,
                  otherHotelName,
                  setReservationStayDate,
                  setDocument,
                  document,
                  ErrorMessage,
                  receiverCountryCode,
                  reservationDate
                )
              }}
            />
            <RenderActionItem
              isActionButtonType={true}
              url=""
              type={"reset"}
              title={"CLEAR"}
              onClick={() => {
                setDocument(null)
                setFormValues(initialFormValues)
                setFormErrors({
                  ...formErrors,
                  senderFirstName: false,
                  checkIn: false,
                  checkOut: false,
                  orderRefNumber: false,
                  stayDate: false,
                  hotelName: false,
                  document: false,
                })
                setStayHotelName(null)
                setOtherHotelName(null)
                setStayDate(() => [])
              }}
              variant="light-outlined"
              navigationType="internal"
            />
          </Stack>
        </form>
      ) : (
        <SuccessScreen
          {...props}
          setFormErrors={setFormErrors}
          setRequestSuccess={setRequestSuccess}
        />
      )}
    </Box>
  )
}

export default ClaimMissingPoints
