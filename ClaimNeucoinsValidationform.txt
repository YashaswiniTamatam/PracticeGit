import {
  orderRefNumber,
  senderEmail,
  senderFirstName,
  senderMobile,
  amount,
} from "../../../../components/forms/gift-card-form/constants"
import { PAGE_STORES } from "../../../../utils/Constants"
import AccountStore from "../../store/pageStore/account.store"

export const validateErrorsAndSubmit = async (
  forStay: string,
  formValues: any,
  stayDate: any,
  setStayDate: any,
  setFormErrors: any,
  setErrorMessage: any,
  formErrors: any,
  stayHotelName: any,
  pageContextUse: any,
  setRequestSuccess: any,
  setOpenCalender: any,
  setFormValues: any,
  initialFormValues: any,
  setStayHotelName: any,
  setOtherHotelName: any,
  otherHotelName: any,
  setReservationStayDate: any,
  setDocument: any,
  document: any,
  ErrorMessage: any,
  receiverCountryCode: string,
  reservationDate: any
) => {
  let payloadRequest: any
  const accountStore = pageContextUse?.getPageStore(
    PAGE_STORES.ACCOUNT_STORES.myAccountStore
  ) as AccountStore

  let isValid = false
  const isDocExists =
    JSON.parse(formValues?.havePhysicalCopy) == true ? !document : false
  if (forStay === "forStay") {
    if (
      !formValues?.[senderFirstName] ||
      !formValues?.[orderRefNumber] ||
      stayDate?.length === 0 ||
      !stayHotelName?.name ||
      !formValues?.[senderEmail] ||
      !formValues?.[senderMobile] ||
      (JSON.parse(formValues?.havePhysicalCopy) == true
        ? !document
        : !formValues?.[amount] || Number(formValues?.[amount]) <= 0)
    ) {
      const isAmountExists =
        JSON.parse(formValues?.havePhysicalCopy) == false
          ? !formValues?.[amount] || Number(formValues?.[amount]) <= 0
          : false
      setFormErrors({
        ...formErrors,
        senderFirstName: !formValues?.[senderFirstName],
        orderRefNumber: !formValues?.[orderRefNumber],
        stayDate: stayDate?.length === 0,
        hotelName: !stayHotelName?.name,
        senderEmail: !formValues?.[senderEmail],
        senderMobile: !formValues?.[senderMobile],
        document: isDocExists,
        amount: isAmountExists,
      })
      setErrorMessage({
        senderFirstName: !formValues?.[senderFirstName]
          ? "Please Enter a valid Name"
          : "",
        stayDate: stayDate?.length === 0 ? "Please Enter a valid Dates" : "",
        orderRefNumber: !formValues?.[orderRefNumber]
          ? "Please Enter a valid value"
          : "",
        hotelName: "Please Enter a valid value",
        senderEmail: !formValues?.[senderEmail]
          ? "Please Enter a valid Email Address"
          : "",
        senderMobile: !formValues?.[senderMobile]
          ? "Please Enter a valid 10 digits Mobile Number"
          : "",
        document: isDocExists ? "Please select the file" : "",
        amount: isAmountExists ? "Enter the valid amount" : "",
      })
      return
    } else {
      isValid = true
      setFormErrors({
        ...formErrors,
        senderFirstName: false,
        orderRefNumber: false,
        stayDate: false,
        hotelName: false,
        senderEmail: false,
        senderMobile: false,
        otherHotelName: false,
        document: false,
      })
    }
    payloadRequest = {
      typeOfClaim: "STAY",
      info: {
        hotelName: stayHotelName?.name,
        checkIn: String(stayDate?.[0]?.toLocaleDateString("en-GB")),
        checkOut: String(stayDate?.[1]?.toLocaleDateString("en-GB")),
      },
      customerName: formValues?.[senderFirstName],
      mobile: receiverCountryCode + formValues?.[senderMobile],
      email: formValues?.[senderEmail],
      confirmationNumber: formValues?.[orderRefNumber],
      doHaveACopyOfReceipt: isDocExists,
    }
  } else {
    if (
      !formValues?.[senderFirstName] ||
      !otherHotelName?.name ||
      !formValues?.[senderEmail] ||
      !formValues?.[senderMobile] ||
      (JSON.parse(formValues?.havePhysicalCopy) == true
        ? !document
        : !formValues?.[amount] || Number(formValues?.[amount]) <= 0)
    ) {
      const isDocExists =
        JSON.parse(formValues?.havePhysicalCopy) == true ? !document : false
      const isAmountExists =
        JSON.parse(formValues?.havePhysicalCopy) == false
          ? !formValues?.[amount] || Number(formValues?.[amount]) <= 0
          : false

      setFormErrors({
        ...formErrors,
        senderFirstName: !formValues?.[senderFirstName],
        otherHotelName: !otherHotelName?.name,
        senderEmail: !formValues?.[senderEmail],
        senderMobile: !formValues?.[senderMobile],
        document: isDocExists,
        amount: isAmountExists,
      })
      setErrorMessage({
        senderFirstName: !formValues?.[senderFirstName]
          ? "Please Enter a valid Name"
          : "",
        stayDate: stayDate?.length === 0 ? "Please Enter a valid Dates" : "",
        otherHotelName: "Please Enter a valid value",
        senderEmail: !formValues?.[senderEmail]
          ? "Please Enter a valid Email Address"
          : "",
        senderMobile: !formValues?.[senderMobile]
          ? "Please Enter a valid 10 digits Mobile Number"
          : "",
        document: isDocExists ? "Please select the file" : "",
        amount: isAmountExists ? "Enter the valid amount" : "",
      })
      return
    } else {
      isValid = true
      setFormErrors({
        ...formErrors,
        senderFirstName: false,
        orderRefNumber: false,
        stayDate: false,
        hotelName: false,
        senderEmail: false,
        senderMobile: false,
        otherHotelName: false,
        document: false,
      })
    }

    payloadRequest = {
      typeOfClaim: "OTHERS",
      info: {
        hotelName: otherHotelName?.name,
        venueName: formValues?.venueName,
        dateOfReservation: reservationDate,
        time: formValues?.approximateTime,
      },
      customerName: formValues?.[senderFirstName],
      mobile: receiverCountryCode + formValues?.[senderMobile],
      email: formValues?.[senderEmail],
      confirmationNumber: null,
      doHaveACopyOfReceipt: isDocExists,
      billAmount: formValues?.[amount],
    }
  }
  let formData: any = {
    payload: "",
    file: "",
  }

  // return

  formData.payload = JSON.stringify(payloadRequest)
  formData.file = document

  let response
  setOpenCalender({
    checkInCheckOut: false,
    reservation: false,
  })
  setStayHotelName(null)
  setOtherHotelName(null)
  if (isValid) {
    response = await accountStore?.claimMissingNeuCoins(formData)
    setRequestSuccess(!response?.error)
    global?.window?.scrollBy(0, -400)
    setFormValues(initialFormValues)
    setStayDate(() => [])
    setDocument(null)
    setReservationStayDate([])
  }
}
